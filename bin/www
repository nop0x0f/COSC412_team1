#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('appointment-reminders-node:server');
const http = require('http');
//const firebase = require('firebase');
//require("firebase/firestore");
const mongoose = require('mongoose');
const cfg = require('../config');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(cfg.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

if(!cfg.mongoUrl) {
  throw new Error("MONGO_URL env variable not set")
}

mongoose.connect(cfg.mongoUrl, {
  useMongoClient: true,
});

mongoose.Promise = Promise;

// if (!cfg.FirebaseAuthDomain) {
//   throw new Error("FIREBASE_AUTHDOMAIN env variable not set");
// }
//
// const firebaseConfig = {
//   apiKey: cfg.FirebaseApiKey,
//   authDomain: cfg.FirebaseAuthDomain,
//   projectID: cfg.FirebaseProjectID,
//   storageBucket: cfg.FirebaseStorageBucket,
//   messagingSenderId: cfg.FirebaseMessagingSenderID,
//   appID: cfg.FirebaseAppID
// }
//
// const FireApp = firebase.initializeApp(firebaseConfig);
// const FireDB = firebase.getFirestore();
//
// FireDB.Promise = Promise;
